{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport fetch from 'isomorphic-unfetch';\nimport '../util/config';\nimport io from 'socket.io-client';\nexport const Get = async function (method, data) {\n  var url = global.url;\n  var str = \"?\";\n\n  for (var k in data) {\n    if (str != \"?\") {\n      str += \"&\";\n    }\n\n    str += k + \"=\" + data[k];\n  }\n\n  var requestURL = url + method + encodeURI(str);\n  const res = await fetch(requestURL);\n  const json = await res.json();\n  return json;\n};\nexport const Post = async function (method, data) {\n  var url = global.url;\n  var requestURL = url + method;\n  const res = await fetch(requestURL, {\n    method: 'POST',\n    body: _JSON$stringify(data),\n    headers: {\n      'Content-Type': 'application/json; charset=utf-8'\n    }\n  });\n  const json = await res.json();\n  return json;\n};\nexport const Connect = () => {\n  const socket = io('http://localhost:3001');\n  socket.on('connect', () => {\n    console.log('Connected!');\n  });\n  return socket;\n};\nexport const Emit = (method, data, socket) => {\n  if (method !== null || socket !== null) {\n    socket.emit(method, data);\n  } else {\n    return null;\n  }\n};\nexport const On = (method, handler, socket) => {\n  if (method !== null || socket !== null) {\n    socket.on(method, function (msg) {\n      if (msg !== null) {\n        handler(msg);\n      }\n    });\n  } else {\n    return null;\n  }\n};","map":{"version":3,"sources":["D:\\workplace\\front-end\\pages\\components\\http.js"],"names":["fetch","io","Get","method","data","url","global","str","k","requestURL","encodeURI","res","json","Post","body","headers","Connect","socket","on","console","log","Emit","emit","On","handler","msg"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAO,gBAAP;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,OAAO,MAAMC,GAAG,GAAC,gBAAgBC,MAAhB,EAAuBC,IAAvB,EAA4B;AACzC,MAAIC,GAAG,GAAGC,MAAM,CAACD,GAAjB;AACA,MAAIE,GAAG,GAAG,GAAV;;AACA,OAAI,IAAIC,CAAR,IAAaJ,IAAb,EAAkB;AACd,QAAGG,GAAG,IAAI,GAAV,EAAc;AACVA,MAAAA,GAAG,IAAI,GAAP;AACH;;AACDA,IAAAA,GAAG,IAAIC,CAAC,GAAG,GAAJ,GAAUJ,IAAI,CAACI,CAAD,CAArB;AACH;;AACD,MAAIC,UAAU,GAAGJ,GAAG,GAACF,MAAJ,GAAcO,SAAS,CAACH,GAAD,CAAxC;AACA,QAAMI,GAAG,GAAG,MAAMX,KAAK,CAACS,UAAD,CAAvB;AACA,QAAMG,IAAI,GAAG,MAAMD,GAAG,CAACC,IAAJ,EAAnB;AAEA,SAAQA,IAAR;AACH,CAdM;AAkBP,OAAO,MAAMC,IAAI,GAAC,gBAAgBV,MAAhB,EAAuBC,IAAvB,EAA4B;AAC1C,MAAIC,GAAG,GAAGC,MAAM,CAACD,GAAjB;AAEA,MAAII,UAAU,GAAGJ,GAAG,GAACF,MAArB;AACA,QAAMQ,GAAG,GAAG,MAAMX,KAAK,CAACS,UAAD,EAAY;AAC/BN,IAAAA,MAAM,EAAE,MADuB;AAE/BW,IAAAA,IAAI,EAAE,gBAAeV,IAAf,CAFyB;AAG/BW,IAAAA,OAAO,EAAC;AACJ,sBAAgB;AADZ;AAHuB,GAAZ,CAAvB;AAQA,QAAMH,IAAI,GAAG,MAAMD,GAAG,CAACC,IAAJ,EAAnB;AAEA,SAAQA,IAAR;AACH,CAfM;AAiBP,OAAO,MAAMI,OAAO,GAAG,MAAI;AAEvB,QAAMC,MAAM,GAAGhB,EAAE,CAAC,uBAAD,CAAjB;AACAgB,EAAAA,MAAM,CAACC,EAAP,CAAU,SAAV,EAAoB,MAAI;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH,GAFD;AAGA,SAAOH,MAAP;AACH,CAPM;AAQP,OAAO,MAAMI,IAAI,GAAG,CAAClB,MAAD,EAAQC,IAAR,EAAaa,MAAb,KAAsB;AACtC,MAAGd,MAAM,KAAK,IAAX,IAAkBc,MAAM,KAAI,IAA/B,EAAoC;AAEhCA,IAAAA,MAAM,CAACK,IAAP,CAAYnB,MAAZ,EAAmBC,IAAnB;AACH,GAHD,MAGK;AACD,WAAO,IAAP;AACH;AAEJ,CARM;AASP,OAAO,MAAMmB,EAAE,GAAG,CAACpB,MAAD,EAAQqB,OAAR,EAAgBP,MAAhB,KAAyB;AACvC,MAAGd,MAAM,KAAK,IAAX,IAAkBc,MAAM,KAAI,IAA/B,EAAoC;AAEhCA,IAAAA,MAAM,CAACC,EAAP,CAAUf,MAAV,EAAiB,UAASsB,GAAT,EAAa;AAC1B,UAAGA,GAAG,KAAG,IAAT,EAAc;AACVD,QAAAA,OAAO,CAACC,GAAD,CAAP;AACH;AACJ,KAJD;AAMH,GARD,MAQK;AACD,WAAO,IAAP;AACH;AAEJ,CAbM","sourcesContent":["import fetch from 'isomorphic-unfetch';\r\nimport '../util/config'\r\nimport io from 'socket.io-client'\r\n\r\nexport const Get=async function (method,data){\r\n    var url = global.url\r\n    var str = \"?\";\r\n    for(var k in data){\r\n        if(str != \"?\"){\r\n            str += \"&\";\r\n        }\r\n        str += k + \"=\" + data[k];\r\n    }         \r\n    var requestURL = url+method  + encodeURI(str); \r\n    const res = await fetch(requestURL)\r\n    const json = await res.json();\r\n\r\n    return  json\r\n}\r\n\r\n\r\n\r\nexport const Post=async function (method,data){\r\n    var url = global.url\r\n    \r\n    var requestURL = url+method; \r\n    const res = await fetch(requestURL,{\r\n        method: 'POST',\r\n        body: JSON.stringify(data),\r\n        headers:{\r\n            'Content-Type': 'application/json; charset=utf-8'\r\n        },\r\n        \r\n    })\r\n    const json = await res.json();\r\n \r\n    return  json\r\n}\r\n\r\nexport const Connect = ()=>{\r\n  \r\n    const socket = io('http://localhost:3001')\r\n    socket.on('connect',()=>{\r\n        console.log('Connected!')\r\n    })\r\n    return socket\r\n}\r\nexport const Emit = (method,data,socket)=>{\r\n    if(method !== null|| socket !==null){\r\n      \r\n        socket.emit(method,data)\r\n    }else{\r\n        return null\r\n    }\r\n   \r\n}\r\nexport const On = (method,handler,socket)=>{\r\n    if(method !== null|| socket !==null){\r\n      \r\n        socket.on(method,function(msg){\r\n            if(msg!==null){\r\n                handler(msg)\r\n            }\r\n        })\r\n       \r\n    }else{\r\n        return null\r\n    }\r\n   \r\n}"]},"metadata":{},"sourceType":"module"}