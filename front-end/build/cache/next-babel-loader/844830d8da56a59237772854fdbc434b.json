{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport fetch from 'isomorphic-unfetch';\nimport '../util/config';\nimport io from 'socket.io-client';\nexport var Get =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(method, data) {\n    var url, str, k, requestURL, res, json;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = global.url;\n            str = \"?\";\n\n            for (k in data) {\n              if (str != \"?\") {\n                str += \"&\";\n              }\n\n              str += k + \"=\" + data[k];\n            }\n\n            requestURL = url + method + encodeURI(str);\n            _context.next = 6;\n            return fetch(requestURL);\n\n          case 6:\n            res = _context.sent;\n            _context.next = 9;\n            return res.json();\n\n          case 9:\n            json = _context.sent;\n            return _context.abrupt(\"return\", json);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function Get(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var Post =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(method, data) {\n    var url, requestURL, res, json;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            url = global.url;\n            requestURL = url + method;\n            _context2.next = 4;\n            return fetch(requestURL, {\n              method: 'POST',\n              body: _JSON$stringify(data),\n              headers: {\n                'Content-Type': 'application/json; charset=utf-8'\n              }\n            });\n\n          case 4:\n            res = _context2.sent;\n            _context2.next = 7;\n            return res.json();\n\n          case 7:\n            json = _context2.sent;\n            return _context2.abrupt(\"return\", json);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function Post(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var Connect = function Connect() {\n  var socket = io('http://localhost:3001');\n  socket.on('connect', function () {\n    console.log('Connected!');\n  });\n  return socket;\n};\nexport var Emit = function Emit(method, data, socket) {\n  if (method !== null || socket !== null) {\n    socket.emit(method, data);\n  } else {\n    return null;\n  }\n};\nexport var On = function On(method, handler, socket) {\n  if (method !== null || socket !== null) {\n    socket.on(method, function (msg) {\n      if (msg !== null) {\n        handler(msg);\n      }\n    });\n  } else {\n    return null;\n  }\n};","map":{"version":3,"sources":["D:\\workplace\\front-end\\pages\\components\\http.js"],"names":["fetch","io","Get","method","data","url","global","str","k","requestURL","encodeURI","res","json","Post","body","headers","Connect","socket","on","console","log","Emit","emit","On","handler","msg"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-unfetch';\r\nimport '../util/config'\r\nimport io from 'socket.io-client'\r\n\r\nexport const Get=async function (method,data){\r\n    var url = global.url\r\n    var str = \"?\";\r\n    for(var k in data){\r\n        if(str != \"?\"){\r\n            str += \"&\";\r\n        }\r\n        str += k + \"=\" + data[k];\r\n    }         \r\n    var requestURL = url+method  + encodeURI(str); \r\n    const res = await fetch(requestURL)\r\n    const json = await res.json();\r\n\r\n    return  json\r\n}\r\n\r\n\r\n\r\nexport const Post=async function (method,data){\r\n    var url = global.url\r\n    \r\n    var requestURL = url+method; \r\n    const res = await fetch(requestURL,{\r\n        method: 'POST',\r\n        body: JSON.stringify(data),\r\n        headers:{\r\n            'Content-Type': 'application/json; charset=utf-8'\r\n        },\r\n        \r\n    })\r\n    const json = await res.json();\r\n \r\n    return  json\r\n}\r\n\r\nexport const Connect = ()=>{\r\n  \r\n    const socket = io('http://localhost:3001')\r\n    socket.on('connect',()=>{\r\n        console.log('Connected!')\r\n    })\r\n    return socket\r\n}\r\nexport const Emit = (method,data,socket)=>{\r\n    if(method !== null|| socket !==null){\r\n      \r\n        socket.emit(method,data)\r\n    }else{\r\n        return null\r\n    }\r\n   \r\n}\r\nexport const On = (method,handler,socket)=>{\r\n    if(method !== null|| socket !==null){\r\n      \r\n        socket.on(method,function(msg){\r\n            if(msg!==null){\r\n                handler(msg)\r\n            }\r\n        })\r\n       \r\n    }else{\r\n        return null\r\n    }\r\n   \r\n}"]},"metadata":{},"sourceType":"module"}